import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;

public class BuncoGame {
	private int point[] = {0, 0, 0};
	private int rnum=1, twithd=1, rwin=0;
	private boolean turnC=false, fdie=false;
	
	public int processRoll(int[] die, int rnum, int turn)
	{
		int result=0;
		int fIndicator=0;

		for(int i=0; i<3; i++){
			if(die[i] == rnum)
				result++;
			if((die[i]==1 || die[i]==3 || die[i]==5)&&(die[0]!=die[1] && die[0]!=die[2] && die[1]!=die[2]))		//checks if the dies match and are different
				fIndicator++;
		}
		point[turn]+=result;
		
		if(fIndicator == 3)
			fdie = true;

		if(result == 3)
			return 700;

		if(fdie){
			result += twithd;
			twithd++;
		}

		if(result == 0)
			turnC = true;

		if(fdie==true && twithd==1)
			turnC = false;
		
		if(die[0] == die[1] && die[1]==die[2])
			result += 3;

		return result;
	}
	
	public boolean fuzzdice(){
		return fdie;
	}
	
	public int getWins(){
		return rwin;
	}
	
	public void roundOver(int turn){
		point[turn]=0;
		rnum++;
	}

	public int Round(){
		for(int i=0; i<3; i++)
		if(point[i] >= 21){
			rwin++;
			rnum++;
			point[0] = 0;
			point[1] = 0;
			point[2] = 0;
		}

		return rnum;
	}

	public boolean turn(){
		if(turnC == true){
			turnC = false;
			return true;
		}
		else
			return turnC;
	}

	/**
	 * Returns the saved point
	 */
	 public int getPoint(int turn)
	{
		return point[turn];
	}
	 
	 public void run() {
	        Clip clip = AudioSystem.getClip();
	        AudioInputStream inputStream = AudioSystem.getAudioInputStream(
	          BuncoGame.class.getResourceAsStream("/path/to/sounds/" + url));
	        clip.open(inputStream);
	        clip.start(); 
}
